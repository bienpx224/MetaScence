{
  "contractName": "PullPayment",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdrawPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.\",\"kind\":\"dev\",\"methods\":{\"payments(address)\":{\"details\":\"Returns the payments owed to an address.\",\"params\":{\"dest\":\"The creditor's address.\"}},\"withdrawPayments(address)\":{\"details\":\"Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.\",\"params\":{\"payee\":\"Whose payments will be withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/@openzeppelin/contracts/security/PullPayment.sol\":\"PullPayment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x53bc600ee8f3aa5491211d6379556bbef66cca088d87d77837f1d7983969ca29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59102907e290f5dcd7e74370d653e5127a8e744603ae6a348a60144396c92cde\",\"dweb:/ipfs/Qmf8hc81ojRKRcx8Qi6TLKV1gJtm1KbY2aX4eK5KBxEJkJ\"]},\"project:/contracts/@openzeppelin/contracts/security/PullPayment.sol\":{\"keccak256\":\"0xc75d72fcde362743b6dd11568725e03b3b347331d725c236e35b57bfaccceca0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0fc9928c4eee747573cf7254c9a2f77d2f0f0f06b1d5ae08697447791c92aaba\",\"dweb:/ipfs/QmNRErctGuQndtC8ce62vvC2n6ndwnJsQDf5wKfRA6pwxs\"]},\"project:/contracts/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xc7fe4fa94d070341492a94a0dad622fec0926de3a28917ff8204c910137e5ee7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d10c7032941aa803310e18f6e62b073b10353d1256d0d7d9c5b48c2f8f833d10\",\"dweb:/ipfs/Qmezdyr3PLF4nTpKZwfMhGNdeoyiiFknTsLTSKDS6nn71C\"]},\"project:/contracts/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xf1a5f52ee72c20566bd22be8d5a980a07b0e1e6e210bc3544bf6575fdb8a897c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://39acbed8d0dab2e55b9da2a6140360106d6e0bc525e3900f7dc9dba05bc84339\",\"dweb:/ipfs/QmPzyBFj6zxPiKTioLqGzZ1NtgBTXB8y4GoVUGSRQdTpgv\"]},\"project:/contracts/@openzeppelin/contracts/utils/escrow/Escrow.sol\":{\"keccak256\":\"0x6e400f8db9be77e9a162a2b0959d9c985d2ea1b922a8d0dbd28825db35d5a371\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://84fdfd944d89c54169212260d3b0700352436438c7e48bcb711f83d1c8fa7178\",\"dweb:/ipfs/QmcF61GE2sH725iaghogtrgXjDQvi3H3Zbq4tdTNaxjnZt\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.0 (security/PullPayment.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/escrow/Escrow.sol\";\r\n\r\n/**\r\n * @dev Simple implementation of a\r\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\r\n * strategy, where the paying contract doesn't interact directly with the\r\n * receiver account, which must withdraw its payments itself.\r\n *\r\n * Pull-payments are often considered the best practice when it comes to sending\r\n * Ether, security-wise. It prevents recipients from blocking execution, and\r\n * eliminates reentrancy concerns.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\r\n * instead of Solidity's `transfer` function. Payees can query their due\r\n * payments with {payments}, and retrieve them with {withdrawPayments}.\r\n */\r\nabstract contract PullPayment {\r\n    Escrow private immutable _escrow;\r\n\r\n    constructor() {\r\n        _escrow = new Escrow();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\r\n     *\r\n     * Note that _any_ account can call this function, not just the `payee`.\r\n     * This means that contracts unaware of the `PullPayment` protocol can still\r\n     * receive funds this way, by having a separate account call\r\n     * {withdrawPayments}.\r\n     *\r\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\r\n     * Make sure you trust the recipient, or are either following the\r\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\r\n     *\r\n     * @param payee Whose payments will be withdrawn.\r\n     */\r\n    function withdrawPayments(address payable payee) public virtual {\r\n        _escrow.withdraw(payee);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the payments owed to an address.\r\n     * @param dest The creditor's address.\r\n     */\r\n    function payments(address dest) public view returns (uint256) {\r\n        return _escrow.depositsOf(dest);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\r\n     * there is no danger of them being spent before withdrawal.\r\n     *\r\n     * @param dest The destination address of the funds.\r\n     * @param amount The amount to transfer.\r\n     */\r\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\r\n        _escrow.deposit{value: amount}(dest);\r\n    }\r\n}\r\n",
  "sourcePath": "D:\\Blockchain\\MetaScence\\contracts\\@openzeppelin\\contracts\\security\\PullPayment.sol",
  "ast": {
    "absolutePath": "project:/contracts/@openzeppelin/contracts/security/PullPayment.sol",
    "exportedSymbols": {
      "Address": [
        15893
      ],
      "Context": [
        16000
      ],
      "Escrow": [
        17559
      ],
      "Ownable": [
        636
      ],
      "PullPayment": [
        7780
      ]
    },
    "id": 7781,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7719,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "96:23:179"
      },
      {
        "absolutePath": "project:/contracts/@openzeppelin/contracts/utils/escrow/Escrow.sol",
        "file": "../utils/escrow/Escrow.sol",
        "id": 7720,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7781,
        "sourceUnit": 17560,
        "src": "123:36:179",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "PullPayment",
        "contractDependencies": [
          17559
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 7721,
          "nodeType": "StructuredDocumentation",
          "src": "163:966:179",
          "text": " @dev Simple implementation of a\n https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n strategy, where the paying contract doesn't interact directly with the\n receiver account, which must withdraw its payments itself.\n Pull-payments are often considered the best practice when it comes to sending\n Ether, security-wise. It prevents recipients from blocking execution, and\n eliminates reentrancy concerns.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n instead of Solidity's `transfer` function. Payees can query their due\n payments with {payments}, and retrieve them with {withdrawPayments}."
        },
        "fullyImplemented": true,
        "id": 7780,
        "linearizedBaseContracts": [
          7780
        ],
        "name": "PullPayment",
        "nameLocation": "1149:11:179",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 7724,
            "mutability": "immutable",
            "name": "_escrow",
            "nameLocation": "1193:7:179",
            "nodeType": "VariableDeclaration",
            "scope": 7780,
            "src": "1168:32:179",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Escrow_$17559",
              "typeString": "contract Escrow"
            },
            "typeName": {
              "id": 7723,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 7722,
                "name": "Escrow",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 17559,
                "src": "1168:6:179"
              },
              "referencedDeclaration": 17559,
              "src": "1168:6:179",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Escrow_$17559",
                "typeString": "contract Escrow"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 7734,
              "nodeType": "Block",
              "src": "1223:41:179",
              "statements": [
                {
                  "expression": {
                    "id": 7732,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7727,
                      "name": "_escrow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7724,
                      "src": "1234:7:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$17559",
                        "typeString": "contract Escrow"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 7730,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1244:10:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Escrow_$17559_$",
                          "typeString": "function () returns (contract Escrow)"
                        },
                        "typeName": {
                          "id": 7729,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 7728,
                            "name": "Escrow",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 17559,
                            "src": "1248:6:179"
                          },
                          "referencedDeclaration": 17559,
                          "src": "1248:6:179",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$17559",
                            "typeString": "contract Escrow"
                          }
                        }
                      },
                      "id": 7731,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1244:12:179",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$17559",
                        "typeString": "contract Escrow"
                      }
                    },
                    "src": "1234:22:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Escrow_$17559",
                      "typeString": "contract Escrow"
                    }
                  },
                  "id": 7733,
                  "nodeType": "ExpressionStatement",
                  "src": "1234:22:179"
                }
              ]
            },
            "id": 7735,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7725,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1220:2:179"
            },
            "returnParameters": {
              "id": 7726,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1223:0:179"
            },
            "scope": 7780,
            "src": "1209:55:179",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 7747,
              "nodeType": "Block",
              "src": "1993:42:179",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7744,
                        "name": "payee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7738,
                        "src": "2021:5:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 7741,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7724,
                        "src": "2004:7:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$17559",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 7743,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdraw",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 17558,
                      "src": "2004:16:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable) external"
                      }
                    },
                    "id": 7745,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2004:23:179",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7746,
                  "nodeType": "ExpressionStatement",
                  "src": "2004:23:179"
                }
              ]
            },
            "documentation": {
              "id": 7736,
              "nodeType": "StructuredDocumentation",
              "src": "1272:651:179",
              "text": " @dev Withdraw accumulated payments, forwarding all gas to the recipient.\n Note that _any_ account can call this function, not just the `payee`.\n This means that contracts unaware of the `PullPayment` protocol can still\n receive funds this way, by having a separate account call\n {withdrawPayments}.\n WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n Make sure you trust the recipient, or are either following the\n checks-effects-interactions pattern or using {ReentrancyGuard}.\n @param payee Whose payments will be withdrawn."
            },
            "functionSelector": "31b3eb94",
            "id": 7748,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawPayments",
            "nameLocation": "1938:16:179",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7739,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7738,
                  "mutability": "mutable",
                  "name": "payee",
                  "nameLocation": "1971:5:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 7748,
                  "src": "1955:21:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 7737,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1955:15:179",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1954:23:179"
            },
            "returnParameters": {
              "id": 7740,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1993:0:179"
            },
            "scope": 7780,
            "src": "1929:106:179",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 7761,
              "nodeType": "Block",
              "src": "2221:50:179",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7758,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7751,
                        "src": "2258:4:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 7756,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7724,
                        "src": "2239:7:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$17559",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 7757,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "depositsOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 17501,
                      "src": "2239:18:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 7759,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2239:24:179",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 7755,
                  "id": 7760,
                  "nodeType": "Return",
                  "src": "2232:31:179"
                }
              ]
            },
            "documentation": {
              "id": 7749,
              "nodeType": "StructuredDocumentation",
              "src": "2043:110:179",
              "text": " @dev Returns the payments owed to an address.\n @param dest The creditor's address."
            },
            "functionSelector": "e2982c21",
            "id": 7762,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "payments",
            "nameLocation": "2168:8:179",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7751,
                  "mutability": "mutable",
                  "name": "dest",
                  "nameLocation": "2185:4:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 7762,
                  "src": "2177:12:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7750,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2177:7:179",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2176:14:179"
            },
            "returnParameters": {
              "id": 7755,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7754,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7762,
                  "src": "2212:7:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7753,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2212:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2211:9:179"
            },
            "scope": 7780,
            "src": "2159:112:179",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 7778,
              "nodeType": "Block",
              "src": "2711:55:179",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7775,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7765,
                        "src": "2753:4:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 7770,
                          "name": "_escrow",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7724,
                          "src": "2722:7:179",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$17559",
                            "typeString": "contract Escrow"
                          }
                        },
                        "id": 7772,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "deposit",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 17526,
                        "src": "2722:15:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
                          "typeString": "function (address) payable external"
                        }
                      },
                      "id": 7774,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 7773,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7767,
                          "src": "2745:6:179",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "2722:30:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
                        "typeString": "function (address) payable external"
                      }
                    },
                    "id": 7776,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2722:36:179",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7777,
                  "nodeType": "ExpressionStatement",
                  "src": "2722:36:179"
                }
              ]
            },
            "documentation": {
              "id": 7763,
              "nodeType": "StructuredDocumentation",
              "src": "2279:355:179",
              "text": " @dev Called by the payer to store the sent amount as credit to be pulled.\n Funds sent in this way are stored in an intermediate {Escrow} contract, so\n there is no danger of them being spent before withdrawal.\n @param dest The destination address of the funds.\n @param amount The amount to transfer."
            },
            "id": 7779,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_asyncTransfer",
            "nameLocation": "2649:14:179",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7768,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7765,
                  "mutability": "mutable",
                  "name": "dest",
                  "nameLocation": "2672:4:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 7779,
                  "src": "2664:12:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7764,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2664:7:179",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7767,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2686:6:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 7779,
                  "src": "2678:14:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7766,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2678:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2663:30:179"
            },
            "returnParameters": {
              "id": 7769,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2711:0:179"
            },
            "scope": 7780,
            "src": "2640:126:179",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 7781,
        "src": "1131:1638:179",
        "usedErrors": []
      }
    ],
    "src": "96:2675:179"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/@openzeppelin/contracts/security/PullPayment.sol",
    "exportedSymbols": {
      "Address": [
        15893
      ],
      "Context": [
        16000
      ],
      "Escrow": [
        17559
      ],
      "Ownable": [
        636
      ],
      "PullPayment": [
        7780
      ]
    },
    "id": 7781,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7719,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "96:23:179"
      },
      {
        "absolutePath": "project:/contracts/@openzeppelin/contracts/utils/escrow/Escrow.sol",
        "file": "../utils/escrow/Escrow.sol",
        "id": 7720,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7781,
        "sourceUnit": 17560,
        "src": "123:36:179",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "PullPayment",
        "contractDependencies": [
          17559
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 7721,
          "nodeType": "StructuredDocumentation",
          "src": "163:966:179",
          "text": " @dev Simple implementation of a\n https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n strategy, where the paying contract doesn't interact directly with the\n receiver account, which must withdraw its payments itself.\n Pull-payments are often considered the best practice when it comes to sending\n Ether, security-wise. It prevents recipients from blocking execution, and\n eliminates reentrancy concerns.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n instead of Solidity's `transfer` function. Payees can query their due\n payments with {payments}, and retrieve them with {withdrawPayments}."
        },
        "fullyImplemented": true,
        "id": 7780,
        "linearizedBaseContracts": [
          7780
        ],
        "name": "PullPayment",
        "nameLocation": "1149:11:179",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 7724,
            "mutability": "immutable",
            "name": "_escrow",
            "nameLocation": "1193:7:179",
            "nodeType": "VariableDeclaration",
            "scope": 7780,
            "src": "1168:32:179",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Escrow_$17559",
              "typeString": "contract Escrow"
            },
            "typeName": {
              "id": 7723,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 7722,
                "name": "Escrow",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 17559,
                "src": "1168:6:179"
              },
              "referencedDeclaration": 17559,
              "src": "1168:6:179",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Escrow_$17559",
                "typeString": "contract Escrow"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 7734,
              "nodeType": "Block",
              "src": "1223:41:179",
              "statements": [
                {
                  "expression": {
                    "id": 7732,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7727,
                      "name": "_escrow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7724,
                      "src": "1234:7:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$17559",
                        "typeString": "contract Escrow"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 7730,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1244:10:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Escrow_$17559_$",
                          "typeString": "function () returns (contract Escrow)"
                        },
                        "typeName": {
                          "id": 7729,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 7728,
                            "name": "Escrow",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 17559,
                            "src": "1248:6:179"
                          },
                          "referencedDeclaration": 17559,
                          "src": "1248:6:179",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$17559",
                            "typeString": "contract Escrow"
                          }
                        }
                      },
                      "id": 7731,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1244:12:179",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$17559",
                        "typeString": "contract Escrow"
                      }
                    },
                    "src": "1234:22:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Escrow_$17559",
                      "typeString": "contract Escrow"
                    }
                  },
                  "id": 7733,
                  "nodeType": "ExpressionStatement",
                  "src": "1234:22:179"
                }
              ]
            },
            "id": 7735,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7725,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1220:2:179"
            },
            "returnParameters": {
              "id": 7726,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1223:0:179"
            },
            "scope": 7780,
            "src": "1209:55:179",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 7747,
              "nodeType": "Block",
              "src": "1993:42:179",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7744,
                        "name": "payee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7738,
                        "src": "2021:5:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 7741,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7724,
                        "src": "2004:7:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$17559",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 7743,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdraw",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 17558,
                      "src": "2004:16:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable) external"
                      }
                    },
                    "id": 7745,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2004:23:179",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7746,
                  "nodeType": "ExpressionStatement",
                  "src": "2004:23:179"
                }
              ]
            },
            "documentation": {
              "id": 7736,
              "nodeType": "StructuredDocumentation",
              "src": "1272:651:179",
              "text": " @dev Withdraw accumulated payments, forwarding all gas to the recipient.\n Note that _any_ account can call this function, not just the `payee`.\n This means that contracts unaware of the `PullPayment` protocol can still\n receive funds this way, by having a separate account call\n {withdrawPayments}.\n WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n Make sure you trust the recipient, or are either following the\n checks-effects-interactions pattern or using {ReentrancyGuard}.\n @param payee Whose payments will be withdrawn."
            },
            "functionSelector": "31b3eb94",
            "id": 7748,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawPayments",
            "nameLocation": "1938:16:179",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7739,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7738,
                  "mutability": "mutable",
                  "name": "payee",
                  "nameLocation": "1971:5:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 7748,
                  "src": "1955:21:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 7737,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1955:15:179",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1954:23:179"
            },
            "returnParameters": {
              "id": 7740,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1993:0:179"
            },
            "scope": 7780,
            "src": "1929:106:179",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 7761,
              "nodeType": "Block",
              "src": "2221:50:179",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7758,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7751,
                        "src": "2258:4:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 7756,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7724,
                        "src": "2239:7:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$17559",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 7757,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "depositsOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 17501,
                      "src": "2239:18:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 7759,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2239:24:179",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 7755,
                  "id": 7760,
                  "nodeType": "Return",
                  "src": "2232:31:179"
                }
              ]
            },
            "documentation": {
              "id": 7749,
              "nodeType": "StructuredDocumentation",
              "src": "2043:110:179",
              "text": " @dev Returns the payments owed to an address.\n @param dest The creditor's address."
            },
            "functionSelector": "e2982c21",
            "id": 7762,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "payments",
            "nameLocation": "2168:8:179",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7751,
                  "mutability": "mutable",
                  "name": "dest",
                  "nameLocation": "2185:4:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 7762,
                  "src": "2177:12:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7750,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2177:7:179",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2176:14:179"
            },
            "returnParameters": {
              "id": 7755,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7754,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7762,
                  "src": "2212:7:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7753,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2212:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2211:9:179"
            },
            "scope": 7780,
            "src": "2159:112:179",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 7778,
              "nodeType": "Block",
              "src": "2711:55:179",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7775,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7765,
                        "src": "2753:4:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 7770,
                          "name": "_escrow",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7724,
                          "src": "2722:7:179",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$17559",
                            "typeString": "contract Escrow"
                          }
                        },
                        "id": 7772,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "deposit",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 17526,
                        "src": "2722:15:179",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
                          "typeString": "function (address) payable external"
                        }
                      },
                      "id": 7774,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 7773,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7767,
                          "src": "2745:6:179",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "2722:30:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
                        "typeString": "function (address) payable external"
                      }
                    },
                    "id": 7776,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2722:36:179",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7777,
                  "nodeType": "ExpressionStatement",
                  "src": "2722:36:179"
                }
              ]
            },
            "documentation": {
              "id": 7763,
              "nodeType": "StructuredDocumentation",
              "src": "2279:355:179",
              "text": " @dev Called by the payer to store the sent amount as credit to be pulled.\n Funds sent in this way are stored in an intermediate {Escrow} contract, so\n there is no danger of them being spent before withdrawal.\n @param dest The destination address of the funds.\n @param amount The amount to transfer."
            },
            "id": 7779,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_asyncTransfer",
            "nameLocation": "2649:14:179",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7768,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7765,
                  "mutability": "mutable",
                  "name": "dest",
                  "nameLocation": "2672:4:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 7779,
                  "src": "2664:12:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7764,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2664:7:179",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7767,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2686:6:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 7779,
                  "src": "2678:14:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7766,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2678:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2663:30:179"
            },
            "returnParameters": {
              "id": 7769,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2711:0:179"
            },
            "scope": 7780,
            "src": "2640:126:179",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 7781,
        "src": "1131:1638:179",
        "usedErrors": []
      }
    ],
    "src": "96:2675:179"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.10+commit.fc410830.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-12-16T04:20:05.860Z",
  "devdoc": {
    "details": "Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.",
    "kind": "dev",
    "methods": {
      "payments(address)": {
        "details": "Returns the payments owed to an address.",
        "params": {
          "dest": "The creditor's address."
        }
      },
      "withdrawPayments(address)": {
        "details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.",
        "params": {
          "payee": "Whose payments will be withdrawn."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}